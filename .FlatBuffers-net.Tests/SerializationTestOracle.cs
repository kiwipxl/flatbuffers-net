using System;
using System.Collections.Generic;
using System.Linq;
using FlatBuffers.Tests.TestTypes;
using TestUnion = SerializationTests.TestUnion;

namespace FlatBuffers.Tests
{
    /// <summary>
    /// The Test Oracle provides a simple way of wrapping the code generated by flatc.exe
    /// It's used to verify that flatbuffers written by the serializer can be read by existing code
    /// and that existing buffers can be deserialized
    /// </summary>
    public class SerializationTestOracle
    {
        public TestStruct1 ReadTestStruct1(byte[] buffer)
        {
            var test = new SerializationTests.TestStruct1();
            var bb = new ByteBuffer(buffer);
            test.__init(0, bb);
            var result = new TestStruct1()
            {
                IntProp = test.IntProp,
                ByteProp = test.ByteProp,
                ShortProp = test.ShortProp
            };
            return result;
        }

        public TestStruct2 ReadTestStruct2(byte[] buffer)
        {
            var test = new SerializationTests.TestStruct2();
            var bb = new ByteBuffer(buffer);
            test.__init(0, bb);
            var result = new TestStruct2()
            {
                IntProp = test.IntProp,
                TestStructProp =  new TestStruct1()
                {
                    IntProp = test.TestStruct1Prop.IntProp,
                    ByteProp = test.TestStruct1Prop.ByteProp,
                    ShortProp = test.TestStruct1Prop.ShortProp
                }
            };
            return result;
        }

        public TestTable1 ReadTestTable1(byte[] buffer)
        {
            var test = SerializationTests.TestTable1.GetRootAsTestTable1(new ByteBuffer(buffer));
            var result = new TestTable1()
            {
                IntProp = test.IntProp,
                ByteProp = test.ByteProp,
                ShortProp = test.ShortProp
            };
            return result;
        }

        public TestTableWithIdentifier ReadTestTableWithIdentifier(byte[] buffer)
        {
            var bb = new ByteBuffer(buffer);
            if (!SerializationTests.TestTableWithIdentifier.TestTableWithIdentifierBufferHasIdentifier(bb))
            {
                throw new Exception("Buffer does not have required identifier");
            }
            var test = SerializationTests.TestTableWithIdentifier.GetRootAsTestTableWithIdentifier(bb);
            var result = new TestTableWithIdentifier()
            {
                IntProp = test.IntProp,
            };
            return result;
        }

        public TestTableWithDefaults ReadTestTableWithDefaults(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithDefaults.GetRootAsTestTableWithDefaults(new ByteBuffer(buffer));
            var result = new TestTableWithDefaults()
            {
                IntProp = test.IntProp,
                ByteProp = test.ByteProp,
                ShortProp = test.ShortProp
            };
            return result;
        }
        
        public TestTableWithUserOrdering ReadTestTable1WithUserOrdering(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithUserOrdering.GetRootAsTestTableWithUserOrdering(new ByteBuffer(buffer));
            var result = new TestTableWithUserOrdering()
            {
                IntProp = test.IntProp,
                ByteProp = test.ByteProp,
                ShortProp = test.ShortProp
            };
            return result;
        }

        public TestTableWithOriginalOrdering ReadTestTableWithOriginalOrdering(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithOriginalOrdering.GetRootAsTestTableWithOriginalOrdering(new ByteBuffer(buffer));
            var result = new TestTableWithOriginalOrdering()
            {
                IntProp = test.IntProp,
                ByteProp = test.ByteProp,
                ShortProp = test.ShortProp
            };
            return result;
        }

        public TestTableWithDeprecatedField ReadTestTableWithDeprecatedField(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithDeprecatedField.GetRootAsTestTableWithDeprecatedField(new ByteBuffer(buffer));
            var result = new TestTableWithDeprecatedField()
            {
                IntProp = test.IntProp,
                ShortProp = test.ShortProp
            };
            return result;
        }

        public TestTableWithTable ReadTestTableWithTable(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithTable.GetRootAsTestTableWithTable(new ByteBuffer(buffer));
            var result = new TestTableWithTable()
            {
                IntProp = test.IntProp,
            };

            if (test.TableProp != null)
            {
                result.TableProp = new TestTable1()
                {
                    IntProp = test.TableProp.IntProp,
                    ByteProp = test.TableProp.ByteProp,
                    ShortProp = test.TableProp.ShortProp,
                };
            }

            return result;
        }

        private static TestTable1 FromTestSchema(SerializationTests.TestTable1 testTable1)
        {
            return new TestTable1()
            {
                IntProp = testTable1.IntProp,
                ByteProp = testTable1.ByteProp,
                ShortProp = testTable1.ShortProp
            };
        }

        public TestTableWithArrayOfTables ReadTestTableWithArrayOfTables(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithArrayOfTables.GetRootAsTestTableWithArrayOfTables(new ByteBuffer(buffer));

            var array = new TestTable1[test.TableArrayPropLength];

            for (var i = 0; i < array.Length; ++i)
            {
                array[i] = FromTestSchema(test.GetTableArrayProp(i));
            }
            
            var list = new List<TestTable1>(test.TableListPropLength);
            for (var i = 0; i < list.Capacity; ++i)
            {
                list.Add(FromTestSchema(test.GetTableListProp(i)));
            }
            
            return new TestTableWithArrayOfTables() { TableArrayProp = array, TableListProp = list };
        }

        public TestTableWithNestedTestTable1 ReadTestTableWithNestedTable1(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithNestedTestTable1.GetRootAsTestTableWithNestedTestTable1(new ByteBuffer(buffer));
            
            var result = new TestTableWithNestedTestTable1()
            {
                IntProp = test.IntProp,
            };

            if (test.NestedLength != 0)
            {
                var nested = test.GetNestedBytes();

                var testNested =
                    SerializationTests.TestTable1.GetRootAsTestTable1(new ByteBuffer(nested.Value.Array,
                        nested.Value.Offset));

                result.Nested = new TestTable1()
                {
                    IntProp = testNested.IntProp,
                    ByteProp = testNested.ByteProp,
                    ShortProp = testNested.ShortProp,
                };
            }

            return result;
        }
        

        public TestTable2 ReadTestTable2(byte[] buffer)
        {
            var test = SerializationTests.TestTable2.GetRootAsTestTable2(new ByteBuffer(buffer));
            var result = new TestTable2()
            {
                StringProp = test.StringProp
            };
            return result;
        }

        public TestTable3 ReadTestTable3(byte[] buffer)
        {
            var test = SerializationTests.TestTable3.GetRootAsTestTable3(new ByteBuffer(buffer));
            var result = new TestTable3()
            {
                BoolProp = test.BoolProp,
                LongProp = test.LongProp,
                DoubleProp = test.DoubleProp,
                EnumProp = (TestEnum)test.EnumProp,
                FloatProp = test.FloatProp,
                SByteProp = test.SByteProp,
                ULongProp = test.ULongProp,
                UShortProp = test.UShortProp
            };
            return result;
        }

        public TestTableWithArray ReadTestTableWithArray(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithArray.GetRootAsTestTableWithArray(new ByteBuffer(buffer));
            var intArray = new int[test.IntArrayLength];
            for (var i = 0; i < intArray.Length; ++i)
            {
                intArray[i] = test.GetIntArray(i);
            }
            var intListLength = test.IntListLength;
            var intList = new List<int>(intListLength);
            for (var i = 0; i < intListLength; ++i)
            {
                intList.Add(test.GetIntList(i));
            }
            return new TestTableWithArray()
            {
                IntArray = intArray,
                IntList = intList
            };
        }

        public TestTableWithStruct ReadTestTableWithStruct(byte[] buffer)
        {
            var test = SerializationTests.TestTableWithStruct.GetRootAsTestTableWithStruct(new ByteBuffer(buffer));

            var testStruct1 = test.StructProp;

            return new TestTableWithStruct()
            {
                IntProp = test.IntProp,
                StructProp =FromTestSchema(testStruct1)
            };
        }

        private TestStruct1 FromTestSchema(SerializationTests.TestStruct1 testStruct1)
        {
            return new TestStruct1()
            {
                IntProp = testStruct1.IntProp,
                ByteProp = testStruct1.ByteProp,
                ShortProp = testStruct1.ShortProp
            };
        }
        
        public TestTableWithArrayOfStructs ReadTestTableWithArrayOfStructs(byte[] buffer)
        {
            var test =
                SerializationTests.TestTableWithArrayOfStructs.GetRootAsTestTableWithArrayOfStructs(
                    new ByteBuffer(buffer));

            var array = new TestStruct1[test.StructArrayLength];
            for (var i = 0; i < array.Length; ++i)
            {
                array[i] = FromTestSchema(test.GetStructArray(i));
            }
            return new TestTableWithArrayOfStructs() {StructArray = array};
        }

        public TestTableWithArrayOfStrings ReadTestTableWithArrayOfStrings(byte[] buffer)
        {
            var test =
                SerializationTests.TestTableWithArrayOfStrings.GetRootAsTestTableWithArrayOfStrings(
                    new ByteBuffer(buffer));

            var array = new string[test.StringArrayPropLength];
            for (var i = 0; i < array.Length; ++i)
            {
                array[i] = test.GetStringArrayProp(i);
            }

            var list = new List<string>(test.StringListPropLength);
            for (var i = 0; i < list.Capacity; ++i)
            {
                list.Add(test.GetStringListProp(i));
            }

            return new TestTableWithArrayOfStrings() { StringArrayProp = array, StringListProp = list };
        }

        public TestTableWithUnion ReadTestTableWithUnion(byte[] buffer)
        {
            var test =
                SerializationTests.TestTableWithUnion.GetRootAsTestTableWithUnion(
                    new ByteBuffer(buffer));

            var result = new TestTableWithUnion() { IntProp = test.IntProp };

            var unionType = test.UnionPropType;

            if (unionType == TestUnion.TestTable1)
            {
                var obj = new SerializationTests.TestTable1();
                var res = test.GetUnionProp(obj);
                result.UnionProp = new TestTable1() { IntProp = res.IntProp, ByteProp = res.ByteProp, ShortProp = res.ShortProp };
            }
            if (unionType == TestUnion.TestTable2)
            {
                var obj = new SerializationTests.TestTable2();
                var res = test.GetUnionProp(obj);
                result.UnionProp = new TestTable2 { StringProp = res.StringProp };
            }
            return result;
        }

        public TestTableWithUnionAndMoreFields ReadTestTableWithUnionAndMoreFields(byte[] buffer)
        {
            var test =
                SerializationTests.TestTableWithUnionAndMoreFields.GetRootAsTestTableWithUnionAndMoreFields(
                    new ByteBuffer(buffer));

            var result = new TestTableWithUnionAndMoreFields()
            {
                IntProp = test.IntProp,
                DoubleProp = test.DoubleProp,
                StringProp = test.StringProp,
                FloatProp = test.FloatProp
            };

            var unionType = test.UnionPropType;

            if (unionType == TestUnion.TestTable1)
            {
                var obj = new SerializationTests.TestTable1();
                var res = test.GetUnionProp(obj);
                result.UnionProp = new TestTable1() { IntProp = res.IntProp, ByteProp = res.ByteProp, ShortProp = res.ShortProp };
            }
            if (unionType == TestUnion.TestTable2)
            {
                var obj = new SerializationTests.TestTable2();
                var res = test.GetUnionProp(obj);
                result.UnionProp = new TestTable2 { StringProp = res.StringProp };
            }
            return result;
        }

        public byte[] GenerateTestStruct1(int intProp, byte byteProp, short shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestStruct1.CreateTestStruct1(fbb, intProp, byteProp, shortProp);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestStruct2(int intProp, TestStruct1 testStruct)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestStruct2.CreateTestStruct2(fbb, intProp, testStruct.IntProp, 
                testStruct.ByteProp, testStruct.ShortProp);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTable1(int intProp, byte byteProp, short shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTable1.CreateTestTable1(fbb, intProp, byteProp, shortProp);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithIdentifier(int intProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTableWithIdentifier.CreateTestTableWithIdentifier(fbb, intProp);
            SerializationTests.TestTableWithIdentifier.FinishTestTableWithIdentifierBuffer(fbb, offset);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithDeprecatedField(int intProp, short shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTableWithDeprecatedField.CreateTestTableWithDeprecatedField(fbb, intProp, shortProp);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithDefaults()
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTableWithDefaults.CreateTestTableWithDefaults(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithUserOrdering(int intProp, byte byteProp, short shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTableWithUserOrdering.CreateTestTableWithUserOrdering(fbb, byteProp, shortProp, intProp);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithOriginalOrdering(int intProp, byte byteProp, short shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTableWithOriginalOrdering.CreateTestTableWithOriginalOrdering(fbb, intProp, byteProp, shortProp);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithNestedTestTable1(int intProp, int inner_intProp, byte inner_byteProp, short inner_shortProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var nestedStart = fbb.Offset;
            var offset = SerializationTests.TestTable1.CreateTestTable1(fbb, inner_intProp, inner_byteProp, inner_shortProp);
            fbb.Finish(offset.Value);
            var nestedEnd = fbb.Offset;
            fbb.PutInt(nestedEnd - nestedStart);  // vec len

            var nestedVector = new VectorOffset(fbb.Offset);

            var outerOffset = SerializationTests.TestTableWithNestedTestTable1.CreateTestTableWithNestedTestTable1(fbb, intProp, nestedVector);
            fbb.Finish(outerOffset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTable2(string stringProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var stringOffset = default(StringOffset);

            if (stringProp != null)
            {
                stringOffset = fbb.CreateString(stringProp);
            }
            var offset = SerializationTests.TestTable2.CreateTestTable2(fbb, stringOffset);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTable3(bool boolProp, long longProp, sbyte sbyteProp, ushort ushortProp, ulong ulongProp,
            TestEnum enumProp, float floatProp, double doubleProp)
        {
            var fbb = new FlatBufferBuilder(8);
            var offset = SerializationTests.TestTable3.CreateTestTable3(fbb, boolProp, longProp, sbyteProp, ushortProp, ulongProp,
                (SerializationTests.TestEnum)enumProp, floatProp, doubleProp);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithStruct(TestStruct1 testStructProp, int intProp)
        {
            var fbb = new FlatBufferBuilder(8);

            SerializationTests.TestTableWithStruct.StartTestTableWithStruct(fbb);
            SerializationTests.TestTableWithStruct.AddIntProp(fbb, intProp);
            var structOffset = SerializationTests.TestStruct1.CreateTestStruct1(fbb, testStructProp.IntProp,
                testStructProp.ByteProp, testStructProp.ShortProp);
            SerializationTests.TestTableWithStruct.AddStructProp(fbb, structOffset);
            var offset = SerializationTests.TestTableWithStruct.EndTestTableWithStruct(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithTable(TestTable1 testTableProp, int intProp)
        {
            var fbb = new FlatBufferBuilder(8);

            var tableOffset = SerializationTests.TestTable1.CreateTestTable1(fbb, testTableProp.IntProp,
                testTableProp.ByteProp, testTableProp.ShortProp);

            SerializationTests.TestTableWithTable.StartTestTableWithTable(fbb);
            SerializationTests.TestTableWithTable.AddIntProp(fbb, intProp);
            
            SerializationTests.TestTableWithTable.AddTableProp(fbb, tableOffset);
            var offset = SerializationTests.TestTableWithTable.EndTestTableWithTable(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithUnion(int intProp, TestTable1 testTable1Prop = null, TestTable2 testTable2Prop = null)
        {
            if (testTable1Prop != null && testTable2Prop != null)
            {
                throw new ArgumentException();
            }

            var fbb = new FlatBufferBuilder(8);

            var unionTableOffset = 0;
            var unionType = TestUnion.NONE;

            if (testTable1Prop != null)
            {
                unionTableOffset = SerializationTests.TestTable1.CreateTestTable1(fbb, testTable1Prop.IntProp,
                    testTable1Prop.ByteProp, testTable1Prop.ShortProp).Value;
                unionType = TestUnion.TestTable1;
            }
            else if (testTable2Prop != null)
            {
                var stringOffset = fbb.CreateString(testTable2Prop.StringProp);
                unionTableOffset = SerializationTests.TestTable2.CreateTestTable2(fbb, stringOffset).Value;
                unionType = TestUnion.TestTable2;
            }

            var tableOffset = SerializationTests.TestTableWithUnion.CreateTestTableWithUnion(fbb, intProp,
                unionType, unionTableOffset);

            fbb.Finish(tableOffset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithUnionAndMoreFields(int intProp, string stringProp, float floatProp, double doubleProp, TestTable1 testTable1Prop = null, TestTable2 testTable2Prop = null)
        {
            if (testTable1Prop != null && testTable2Prop != null)
            {
                throw new ArgumentException();
            }

            var fbb = new FlatBufferBuilder(8);

            var stringOffset = fbb.CreateString(stringProp);

            var unionTableOffset = 0;
            var unionType = TestUnion.NONE;
            
            if (testTable1Prop != null)
            {
                unionTableOffset = SerializationTests.TestTable1.CreateTestTable1(fbb, testTable1Prop.IntProp,
                    testTable1Prop.ByteProp, testTable1Prop.ShortProp).Value;
                unionType = TestUnion.TestTable1;
            }
            else if (testTable2Prop != null)
            {
                var stringOffset2 = fbb.CreateString(testTable2Prop.StringProp);
                unionTableOffset = SerializationTests.TestTable2.CreateTestTable2(fbb, stringOffset2).Value;
                unionType = TestUnion.TestTable2;
            }

            var tableOffset = SerializationTests.TestTableWithUnionAndMoreFields.CreateTestTableWithUnionAndMoreFields(fbb, intProp,
                unionType, unionTableOffset, stringOffset, floatProp, doubleProp);

            fbb.Finish(tableOffset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithArray(int[] intArray, List<int> intList)
        {
            var fbb = new FlatBufferBuilder(8);

            var intArrayOffset = SerializationTests.TestTableWithArray.CreateIntArrayVector(fbb, intArray);
            var intListOffset = SerializationTests.TestTableWithArray.CreateIntListVector(fbb, intList.ToArray());

            SerializationTests.TestTableWithArray.StartTestTableWithArray(fbb);
            SerializationTests.TestTableWithArray.AddIntArray(fbb, intArrayOffset);
            SerializationTests.TestTableWithArray.AddIntList(fbb, intListOffset);
            var offset = SerializationTests.TestTableWithArray.EndTestTableWithArray(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithArrayOfTables(TestTable1[] tableArray, List<TestTable1> tableList)
        {
            var fbb = new FlatBufferBuilder(8);

            var tableArrayElementOffsets = tableArray.Select(element => SerializationTests.TestTable1.CreateTestTable1(fbb, element.IntProp, element.ByteProp, element.ShortProp)).ToArray();
            var tableListElementOffsets = tableList.Select(element => SerializationTests.TestTable1.CreateTestTable1(fbb, element.IntProp, element.ByteProp, element.ShortProp)).ToArray();

            var tableArrayVectorOffset = SerializationTests.TestTableWithArrayOfTables.CreateTableArrayPropVector(fbb, tableArrayElementOffsets);
            var tableListVectorOffset = SerializationTests.TestTableWithArrayOfTables.CreateTableArrayPropVector(fbb, tableListElementOffsets);
            
            SerializationTests.TestTableWithArrayOfTables.StartTestTableWithArrayOfTables(fbb);
            SerializationTests.TestTableWithArrayOfTables.AddTableArrayProp(fbb, tableArrayVectorOffset);
            SerializationTests.TestTableWithArrayOfTables.AddTableListProp(fbb, tableListVectorOffset);
            var offset = SerializationTests.TestTableWithArrayOfTables.EndTestTableWithArrayOfTables(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        public byte[] GenerateTestTableWithArrayOfStrings(string[] stringArray, List<string> stringList)
        {
            var fbb = new FlatBufferBuilder(8);

            var stringArrayElementOffsets = stringArray.Select(s => fbb.CreateString(s)).ToArray();
            var stringListElementOffsets = stringList.Select(s => fbb.CreateString(s)).ToArray();

            var stringArrayVectorOffset = SerializationTests.TestTableWithArrayOfStrings.CreateStringArrayPropVector(fbb, stringArrayElementOffsets);
            var stringListVectorOffset = SerializationTests.TestTableWithArrayOfStrings.CreateStringArrayPropVector(fbb, stringListElementOffsets);

            SerializationTests.TestTableWithArrayOfStrings.StartTestTableWithArrayOfStrings(fbb);
            SerializationTests.TestTableWithArrayOfStrings.AddStringArrayProp(fbb, stringArrayVectorOffset);
            SerializationTests.TestTableWithArrayOfStrings.AddStringListProp(fbb, stringListVectorOffset);
            var offset = SerializationTests.TestTableWithArrayOfStrings.EndTestTableWithArrayOfStrings(fbb);
            fbb.Finish(offset.Value);
            return GetBytes(fbb);
        }

        private static byte[] GetBytes(FlatBufferBuilder fbb)
        {
            var data = new byte[fbb.Offset];
            Buffer.BlockCopy(fbb.DataBuffer.Data, fbb.DataBuffer.Length - fbb.Offset, data, 0, fbb.Offset);
            return data;
        }
    }
}